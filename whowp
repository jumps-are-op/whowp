#!/bin/sh
# shellcheck disable=SC2034

# Forked from daringcuteseal's whow, by jumps are op
# This software is under GPL version 2 and comes with ABSOLUTELY NO WARRANTY

main(){
	# Style
	#BOLD='[1m'
	ITALIC='[3m'
	RESET='[0;0m'
	#BLINK='[5m'
	INVERT='[7m'
	#STRIKE='[9m'
	DIM='[2m'
	COLOR_dred='[31m'
	COLOR_dgreen='[32m'
	COLOR_orange='[33m'
	COLOR_dblue='[34m'
	COLOR_purple='[35m'
	COLOR_magenta='[35m'
	COLOR_dcyan='[36m'
	COLOR_grey='[37m'
	COLOR_brown='[1;30m'
	COLOR_red='[1;31m'
	COLOR_green='[1;32m'
	COLOR_yellow='[1;33m'
	COLOR_blue='[1;34m'
	COLOR_pink='[1;35m'
	COLOR_lblue='[1;36m'
	COLOR_cyan='[1;36m'
	BACKGROUND_dred='[41m[30m'
	BACKGROUND_dgreen='[42m[30m'
	BACKGROUND_orange='[43m[30m'
	BACKGROUND_dblue='[44m[30m'
	BACKGROUND_purple='[45m[30m'
	BACKGROUND_magenta='[45m[30m'
	BACKGROUND_dcyan='[46m[30m'
	BACKGROUND_grey='[47m[30m'
	BACKGROUND_brown='[5;40m[1;37m'
	BACKGROUND_red='[5;41m[1;37m'
	BACKGROUND_green='[5;42m[1;37m'
	BACKGROUND_yellow='[5;43m[30m'
	BACKGROUND_blue='[5;44m[1;37m'
	BACKGROUND_pink='[5;45m[1;37m'
	BACKGROUND_lblue='[5;46m[1;37m'
	BACKGROUND_cyan='[5;46m[1;37m'
	BACKGROUND_white='[5;47m[30m'

	[ ! -t 1 ] &&
		unset BOLD ITALIC RESET BLINK INVERT STRIKE DIM \
		COLOR_dred COLOR_dgreen COLOR_orange COLOR_dblue COLOR_purple \
		COLOR_magenta COLOR_dcyan COLOR_grey COLOR_brown COLOR_red \
		COLOR_green COLOR_yellow COLOR_blue COLOR_pink COLOR_lblue COLOR_cyan \
		BACKGROUND_dred BACKGROUND_dgreen BACKGROUND_orange BACKGROUND_dblue \
		BACKGROUND_purple BACKGROUND_magenta BACKGROUND_dcyan BACKGROUND_grey \
		BACKGROUND_brown BACKGROUND_red BACKGROUND_green BACKGROUND_yellow \
		BACKGROUND_blue BACKGROUND_pink BACKGROUND_lblue BACKGROUND_cyan

	# Icons (emojis)
	ICON_date="üìÜ"
	ICON_time="üïê"
	ICON_todo="‚úÖ" # <checkbox>
	ICON_important="‚ùó"
	ICON_events="‚åö"
	ICON_tag="ÓÇ≤"


	set -e -- "${@:-show}"
	PRG=${0##*/}
	config=${XDG_CONFIG_HOME:-$HOME/.config}/whowp/rc
	while :;do
		case $1 in
			-c|--conf)
				[ ! "$2" ] && dishelp
				config=$2
				shift
			;;
			-c?*)config=${2#-c};;
			--help|help|-h|h)(dishelp) || exit 0;;
			edit)
				case $2 in
					rc)"${EDITOR:-vi}" -- "$config";;
					info)
						readconfig "$config"
						"${EDITOR:-vi}" -- "$CONFIG_info"
					;;
					*)echo "$PRG: $2: Unknown argument." >&2; dishelp;;
				esac
				shift
			;;
			show)
 	        	readconfig "$config"
				[ "$CONFIG_usebaddateformat" ] &&
					currentdate=$(date +%m/%d/%Y) ||
					currentdate=$(date +%d/%m/%Y)
				currenttime=$(date +%H:%M)
				case $2 in
					important)printimportant "$CONFIG_info"; exit;;
					todos)printtodos "$CONFIG_info"; exit;;
					events)
						cat <<-EOF

							${ICON_todo:+${ICON_events} } Events

						EOF
						printevents "$CONFIG_info" "Events Today" \
							"[ \"\$date\" = \"\$currentdate\" ]"
						printevents "$CONFIG_info" "Upcoming Events" \
							"! datepassed \"\$date\""
						printevents "$CONFIG_info" "Past Events" \
							"datepassed \"\$date\""
						exit
					;;
					schedule)printschedules "$CONFIG_info"; exit 0;;
					custom:*)eval "custom_${format#*:}"; exit;;
					"");;
					*)echo "$PRG: $2: Unkown argument" >&2; exit 1;;
				esac
				while [ "$CONFIG_format" ];do
					format=${CONFIG_format%%/*}
					case $format in
						separator:0|separator)echo;;
						separator:1|separator:-)
	echo "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
;;
						separator:2|separator:=)
	echo "================================================================="
;;
						separator:3|separator:~)
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
;;
						date)
							printf " %sToday is%s %s%s%s%s %s%s" \
								"$DIM" "$RESET" \
								"$BACKGROUND_blue" \
								"${CONFIG_icons:+$ICON_date }" \
							"$(date "+${CONFIG_dateformat:-%a, %b %d %Y}") " \
								"$RESET" \
								"$BACKGROUND_blue" \
								"${CONFIG_icons:+$ICON_time }"
							case ${CONFIG_timeformat:-12} in
								12)date "+%r $RESET";;
								24)date "+%T $RESET";;
							esac
						;;
						cal|calendar)printcals;;
						important)printimportant "$CONFIG_info";;
						todos)printtodos "$CONFIG_info";;
						events)
							cat <<-EOF

								${ICON_todo:+${ICON_events} } Events

							EOF
							printevents "$CONFIG_info" "Events Today" \
								"[ \"\$date\" = \"\$currentdate\" ]"
							printevents "$CONFIG_info" "Upcoming Events" \
								"! datepassed \"\$date\""
							printevents "$CONFIG_info" "Past Events" \
								"datepassed \"\$date\""
						;;
						schedule)printschedules "$CONFIG_info";;
						custom:*)eval "custom_${format#*:}";;
						*)
							echo "$PRG: $format: Unknown format" >&2
							exit 1
						;;
					esac
					CONFIG_format=${CONFIG_format#*/}
				done
			;;
			todo)
				case $2 in
					add)
						readconfig "$config"
						shift 2
						echo "todo $*" >>"$CONFIG_info"
						exit
					;;
					del)
						readconfig "$config"
						tmp=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
						if [ "$3" = all ];then
							grep -v "^ *todo " "$CONFIG_info" >"$tmp"
							mv "$tmp" "$CONFIG_info"
							exit
						fi

						if ! [ "$3" -eq "$3" ] 2>/dev/null;then
							echo "$PRG: $3: Invalid number" >&2
							exit 1
						fi

						index=1
						while read -r line;do
							case $line in
								todo\ *)
									[ "$index" -eq "$3" ] && cat ||
										printf "%s\n" "$line"
									index=$((index+1));;
								*)printf "%s\n" "$line";;
							esac
						done <"$CONFIG_info" >"$tmp"
						mv "$tmp" "$CONFIG_info"
						exit
					;;
					mark)
						readconfig "$config"
						tmp=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
						if ! [ "$3" -eq "$3" ] 2>/dev/null;then
							echo "$PRG: $3: Invalid number" >&2
							exit 1
						fi

						index=1
						while read -r line;do
							case $line in
							todo\ *)
								if [ "$index" -eq "$3" ];then
									case $line in
									*\ @done*)
										printf %s "$line" | sed 's/ @done//';;
									*)printf "%s\n" "$line @done";;
									esac
									cat
								else
									printf "%s\n" "$line"
								fi
								index=$((index+1));;
							*)printf "%s\n" "$line";;
							esac
						done <"$CONFIG_info" >"$tmp"
						mv "$tmp" "$CONFIG_info"
						exit
					;;
					"")dishelp;;
					*)echo "$PRG: $2: Unkown argument" >&2; exit 1;;
				esac
			;;
			event)
				case $2 in
				add)
					readconfig "$config"
					shift 2
					echo "event $*" >>"$CONFIG_info"
					exit
				;;
				del)
					readconfig "$config"
					tmp=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
					if [ "$3" = all ];then
						grep -v "^ *event " "$CONFIG_info" >"$tmp"
						mv "$tmp" "$CONFIG_info"
						exit
					fi

					if ! [ "$3" -eq "$3" ] 2>/dev/null;then
						echo "$PRG: $3: Invalid number" >&2
						exit 1
					fi

					index=1
					while read -r line;do
						case $line in
							event\ *)
								[ "$index" -eq "$3" ] && cat ||
									printf "%s\n" "$line"
								index=$((index+1));;
							*)printf "%s\n" "$line";;
						esac
					done <"$CONFIG_info" >"$tmp"
					mv "$tmp" "$CONFIG_info"
					exit
				;;esac
			;;
			sched)
				case $2 in
				add)
					readconfig "$config"
					shift 2
					echo "sched $*" >>"$CONFIG_info"
					exit
				;;
				del)
					readconfig "$config"
					tmp=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
					if [ "$3" = all ];then
						grep -v "^ *sched " "$CONFIG_info" >"$tmp"
						mv "$tmp" "$CONFIG_info"
						exit
					fi

					if ! [ "$3" -eq "$3" ] 2>/dev/null;then
						echo "$PRG: $3: Invalid number" >&2
						exit 1
					fi

					index=1
					while read -r line;do
						case $line in
							sched\ *)
								[ "$index" -eq "$3" ] && cat ||
									printf "%s\n" "$line"
								index=$((index+1));;
							*)printf "%s\n" "$line";;
						esac
					done <"$CONFIG_info" >"$tmp"
					mv "$tmp" "$CONFIG_info"
					exit
				;;esac
			;;
			*)
				echo "$PRG: $1: Unknown argument." >&2
				dishelp
			;;
		esac

		[ $# = 1 ] && break
		shift
	done
}

printimportant(){
	cat <<-EOF

		${ICON_todo:+${ICON_todo} } Important To-Do's

	EOF
	index=1
	grep "^ *todo " <"$1" | while read -r line;do
		line=${line%%#*}' '
		line=${line#todo }
		tags="" date="" time="" todo="" tag=""
		while [ "$line" ];do
			first=${line%% *}
			line=${line#* }
			case $first in
				@[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]|\
				@[0-9]/[0-9])date=${first#@}/$(date +%Y);;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9])
					first=${first#@}; date=${first%/*}/20${first##*/};;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9][0-9][0-9])date=${first#@};;
				@[0-9]:[0-5][0-9]|\
				@0[0-9]:[0-5][0-9]|\
				@1[01]:[0-5][0-9])
					case ${line%% *} in
						AM)time=${first#@}; line=${line#AM};;
						PM)first=${first#@}; line=${line#PM}
							time=$((${first%:*}+12)):${first#*:};;
						*)time=${first#@};;
					esac
				;;
				@1[2-9]:[0-5][0-9]|@2[0-3]:[0-5][0-9])time=${first#@};;
				@?*)tags=${first#@}/$tags;;
				\&?*)tags=${first#@}/$tags; todo="${todo:+$todo }$first";;
				*)first=${first#\\} todo="${todo:+$todo }$first";;
			esac
		done
		if datepassed "$date" || {
				[ "$date" = "$currentdate" ] && timepassed "$time"
			} || {
				(case /$tags in */important/*):;;*)false;;esac) &&
				(case /$tags in */done/*)false;;*):;;esac)
			};then

			printf "%s  #%-2d " "$COLOR_red" "$index"
			while [ "${tags%/}" ];do
				tag=${tags%%/*}
				eval color="\$COLOR_$(getcatcolor "$tag")"
				eval background="\${BACKGROUND_$(getcatcolor "$tag"):-$BACKGROUND_white}"

				# shellcheck disable=SC2154
				printf %s \
					"${CONFIG_icons:+$color$ICON_tag}$background$tag $RESET"
				tags=${tags#*/}
			done
			[ "$tag" ] && printf ' '
			datepassed "$date" || {
				[ "$date" = "$currentdate" ] && timepassed "$time"
			} || eval "case /\$tags in */important/*):;;*)false;;esac" &&
				printf %s \
					"$COLOR_red$todo$RESET" \
					" $BACKGROUND_red overduo $RESET" ||
				printf %s "$color$todo$RESET"
			echo
		fi
		index=$((index+1))
	done
}

printtodos(){
	cat <<-EOF

		${ICON_todo:+${ICON_todo} } To-Do's

	EOF
	index=1
	grep "^ *todo " <"$1" | while read -r line;do
		line=${line%%#*}' '
		line=${line#todo }
		tags="" date="" time="" todo="" tag=""
		while [ "$line" ];do
			first=${line%% *}
			line=${line#* }
			case $first in
				@[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]|\
				@[0-9]/[0-9])date=${first#@}/$(date +%Y);;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9])
					first=${first#@}; date=${first%/*}/20${first##*/};;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9][0-9][0-9])date=${first#@};;
				@[0-9]:[0-5][0-9]|\
				@0[0-9]:[0-5][0-9]|\
				@1[01]:[0-5][0-9])
					case ${line%% *} in
						AM)time=${first#@}; line=${line#AM};;
						PM)first=${first#@}; line=${line#PM}
							time=$((${first%:*}+12)):${first#*:};;
						*)time=${first#@};;
					esac
				;;
				@1[2-9]:[0-5][0-9]|@2[0-3]:[0-5][0-9])time=${first#@};;
				@?*)tags=${first#@}/$tags;;
				\&?*)tags=${first#@}/$tags; todo="${todo:+$todo }$first";;
				*)first=${first#\\} todo="${todo:+$todo }$first";;
			esac
		done
		datepassed "$date" || {
				[ "$date" = "$currentdate" ] && timepassed "$time"
			} ||
			eval "case /\$tags in */important/*):;;*)false;;esac" &&
			printf %s "$COLOR_red"
		printf "  #%-2d " "$index"

		color=
		while [ "${tags%/}" ];do
			tag=${tags%%/*}
			eval color="\$COLOR_$(getcatcolor "$tag")"
			eval background="\$BACKGROUND_$(getcatcolor "$tag")"
			background=${background:-$BACKGROUND_white}

			# shellcheck disable=SC2154
			printf %s "${CONFIG_icons:+$color$ICON_tag}$background$tag $RESET"
			tags=${tags#*/}
		done
		[ "$tag" ] && printf ' '
		datepassed "$date" || {
			[ "$date" = "$currentdate" ] && timepassed "$time"
		} || eval "case /\$tags in */important/*):;;*)false;;esac" &&
			printf %s \
				"$COLOR_red$todo$RESET" \
				" $BACKGROUND_red overduo $RESET" ||
			printf %s "$color$todo$RESET"
		echo
		index=$((index+1))
	done
}

printevents(){
	cat <<-EOF

		 $2:

	EOF
	index=1
	grep "^ *event " <"$1" | while read -r line;do
		line=${line%%#*}' '
		line=${line#event }
		tags="" date="" time="" event=""
		while [ "$line" ];do
			first=${line%% *}
			line=${line#* }
			case $first in
				@[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]|\
				@[0-9]/[0-9])date=${first#@}/$(date +%Y);;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9])
					first=${first#@}; date=${first%/*}/20${first##*/};;
				@[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9][0-9]/[0-9]/[0-9][0-9][0-9][0-9]|\
				@[0-9]/[0-9]/[0-9][0-9][0-9][0-9])date=${first#@};;
				@?*)tags=${first#@}/$tags;;
				\&?*)tags=${first#@}/$tags; event="${event:+$event }$first";;
				*)first=${first#\\} event="${event:+$event }$first";;
			esac
		done
		if eval "$3";then
			eval "case /\$tags in */important/*):;;*)false;;esac" &&
				printf %s "$COLOR_red"
			printf "  #%-2d " "$index"
			color=
			while [ "${tags%/}" ];do
				tag=${tags%%/*}
				eval color="\$COLOR_$(getcatcolor "$tag")"
				eval background="\$BACKGROUND_$(getcatcolor "$tag")"
				background=${background:-$BACKGROUND_white}

				# shellcheck disable=SC2154
				printf %s \
					"${CONFIG_icons:+$color$ICON_tag}$background$tag $RESET"
				tags=${tags#*/}
			done
			[ "$tag" ] && printf ' '
			printf %s "$color$event$RESET"
			echo
		fi
		index=$((index+1))
	done
}

printschedules(){
	cat <<-EOF

		${ICON_todo:+${ICON_events} } Scheduled Events

	EOF
	index=1
	grep "^ *sched " <"$1" | while read -r line;do
		line=${line%%#*}' '
		line=${line#sched }
		tags="" date="" sched="" tag="" starttime="" endtime=""
		while [ "$line" ];do
			first=${line%% *}
			line=${line#* }
			case $first in
				@[1-9]:[0-5][0-9]|\
				@0[1-9]:[0-5][0-9]|\
				@1[01]:[0-5][0-9])
					first=${first#@}
					first=${first#0}
					if [ "$starttime" ];then
						case ${line%% *} in
							AM)endtime=$first; line=${line#AM};;
							PM)line=${line#PM}
								endtime=$((${first%:*}+12)):${first#*:};;
							*)endtime=$first;;
						esac
					else
						case ${line%% *} in
							AM)starttime=$first; line=${line#AM};;
							PM)line=${line#PM}
								starttime=$((${first%:*}+12)):${first#*:};;
							*)starttime=$first;;
						esac
					fi
				;;
				@1[2-9]:[0-5][0-9]|@2[0-3]:[0-5][0-9])
					[ "$starttime" ] &&
						endtime=${first#@} ||
						starttime=${first#@}
				;;
				@sun|@mon|@tue|@wed|@thu|@fri|@sat|@ev|@wd|@we)day=${first#@};;
				@%)endtime=;;
				@?*)tags=${first#@}/$tags;;
				\&?*)tags=${first#@}/$tags; sched="${sched:+$sched }$first";;
				*)first=${first#\\} sched="${sched:+$sched }$first";;
			esac
		done
		eval "case /\$tags in */important/*):;;*)false;;esac" &&
			printf %s "$COLOR_red"
		printf "  #%-2d %s " "$index" "$BACKGROUND_white"
		case $day in
			sun)printf Sunday;;
			mon)printf Monday;;
			thu)printf Thursday;;
			wed)printf Wednesday;;
			thu)printf Tuesday;;
			fri)printf Friday;;
			sat)printf Saturdays;;
			*);;
		esac
		printf %s " $starttime "
		[ "$endtime" ] &&
			printf %s "- $endtime "
		printf %s "$RESET"

		color=
		while [ "${tags%/}" ];do
			tag=${tags%%/*}
			eval color="\$COLOR_$(getcatcolor "$tag")"
			eval background="\$BACKGROUND_$(getcatcolor "$tag")"
			background=${background:-$BACKGROUND_white}

			# shellcheck disable=SC2154
			printf %s "${CONFIG_icons:+$color$ICON_tag}$background$tag $RESET"
			tags=${tags#*/}
		done
		[ "$tag" ] && printf ' '
		printf %s " $color$sched$RESET"
		echo
		index=$((index+1))
	done
}

readconfig(){
	# Check config permission
	:<"$1"
	if [ -d "$1" ];then
		echo "$PRG: $1: Is a directory" >&2
		exit 1
	fi

	CONFIG_cats=important:red

	# rc's fuctions
	icons(){
		case $1 in
			[Yy][Ee][Ss]|1)CONFIG_icons=1;;
			[Nn][Oo]|0)unset CONFIG_icons;;
			*)echo "$PRG: $1: Invalid option (should be yes/no)" >&2;exit 1;;
		esac
	}
	infile(){
		:<"$1"
		if [ -d "$1" ];then
			echo "$PRG: $1: Is a directory" >&2
			exit 1
		fi
		CONFIG_info=$1
	}
	timeformat(){
		case $1 in
			12)CONFIG_12hourtime=1;;
			24)unset CONFIG_12hourtime;;
			*)echo "$PRG: $1: Invalid option (should be 12/24)" >&2;exit 1;;
		esac
	}
	dateformat(){ CONFIG_dateformat=$1;}
	dateformat_cfg(){
		case $1 in
			mm/dd/yyyy|mm/dd)CONFIG_usebaddateformat=1;;
			dd/mm/yyyy|dd/mm)unset CONFIG_usebaddateformat;;
			*)
				echo "$PRG: $1: Invalid option (dd/mm/yyyy, mm/dd/yyy)" >&2
				exit 1
			;;
		esac
	}
	category(){
		CONFIG_cats=$CONFIG_cats/$(printf "%s/" "$@")
		CONFIG_cats=${CONFIG_cats#/}
	}
	format(){
		CONFIG_format=$CONFIG_format/$(printf "%s/" "$@")
		CONFIG_format=${CONFIG_format#/}
	}
	custom(){ # Idk how to handle this, any ideas?
		eval "custom_$1(){
			$2
		}"
	}
	# shellcheck source=/dev/null
	. "$config"
	unset -f icons cachedir timeforma dateformatt dateformat_cfg category \
		format custom
}

printcals()(
	year=$(date +%Y)
	month=$(date +%m)
	tmp=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
	tmp1=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
	tmp2=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
	tmp3=$(echo "mkstemp(\`/tmp/tmp.')" | m4)
	case $month in
		01)
			cal 12 $((year-1)) >"$tmp1"
			cal 1 "$year" >"$tmp2"
			cal 2 "$year" >"$tmp3"
		;;
		12)
			cal 1 "$year" >"$tmp1"
			cal 2 "$year" >"$tmp2"
			cal 12 "$((year+1))" >"$tmp3"
		;;
		*)
			cal $((month-1)) "$year" >"$tmp1"
			cal "$month" "$year" >"$tmp2"
			cal $((month+1)) "$year" >"$tmp3"
		;;
	esac

	len=0
	while read -r line;do
		[ "${#line}" -gt "$len" ] && len=${#line}
	done <"$tmp1"
	len=$((len+1))

	sed "/.\{$len\}/!{s/$/$(printf %$((len))s)/;s/^\(.\{$len\}\).*/\1/}" \
		"$tmp1" > "$tmp"
	mv "$tmp" "$tmp1"

	sed "/.\{$len\}/!{s/$/$(printf %$((len))s)/;s/^\(.\{$len\}\).*/\1/}" \
		"$tmp2" > "$tmp"
	mv "$tmp" "$tmp2"

	sed "/.\{$len\}/!{s/$/$(printf %$((len))s)/;s/^\(.\{$len\}\).*/\1/}" \
		"$tmp3" > "$tmp"
	mv "$tmp" "$tmp3"

	paste -d ' ' -- "$tmp1" "$tmp2" "$tmp3" | sed '$d'

	rm -f -- "$tmp1" "$tmp2" "$tmp3"
)

# 12/34/5678 -> 5678/34/12
revdate(){
	m=${1#*/}
	echo "${1##*/}/${m%/*}/${1%%/*}"
}

# dd/mm/yyyy or mm/dd/yyyy
datepassed(){
	[ "$1" ] || return
	year=${1##*/}
	cyear=${currentdate##*/}
	if [ "$CONFIG_usebaddateformat" ];then
		month=${1%%/*}
		cmonth=${currentdate%%/*}
		day=${1%/*}
		day=${day#*/}
		cday=${currentdate%/*}
		cday=${cday#*/}
	else
		month=${1%/*}
		month=${month#*/}
		cmonth=${currentdate%/*}
		cmonth=${cmonth#*/}
		day=${1%%/*}
		cday=${currentdate%%/*}
	fi

	[ "$cyear" -gt "$year" ] && return
	[ "$cyear" = "$year" ] || return
	[ "$cmonth" -gt "$month" ] && return
	[ "$cmonth" = "$month" ] && [ "$cday" -gt "$day" ]
}

# 24h HH:MM only
timepassed(){
	[ ! "$1" ] && return
	hour=${1%:*}
	min=${1#*:}
	chour=${currenttime%:*}
	cmin=${currenttime#*:}
	[ "$chour" -gt "$hour" ] && return
	[ "$chour" = "$hour" ] && [ "$cmin" -gt "$min" ]
}

getcatcolor(){
	case /$CONFIG_cats in
		*/$1:*);;
		*)return 1;;
	esac
	printf %s "/$CONFIG_cats" | sed "s/.*\/$1:\([^\/]*\)\/.*/\1/g"
}

dishelp(){
	cat >&2 <<-EOF
whowp  the better whow, written in POSIX shell
Usage: $PRG [options] [command [args]]

\`whowp show\` will be the default command, if no arguments were given.

Options:
 	-h   --help          Show this help
 	-V   --version       Print version
 	-c   --conf <file>   Specify a config,
 	                     default is $ITALIC\$XDG_CONFIG_HOME$RESET/whow/rc,
 	                     or $ITALIC\$HOME$RESET/.config/whow/rc

Commands:
 	edit <rc|info>                  Edit with $ITALIC\$EDITOR$RESET, or vi
 	show [todos|events|important]   Show to-do's and/or events
 	todo <subcommand>
 		add <name> [@due|@categ]    Add a todo
 		del <index|all>             Delete a todo by its index
 		mark <index>                Mark done/undone a todo by its index

 	event <subcommand>
 		add @date <name> [@categ]   Add an event
 		del <index|all>             Delete an event by its index

 	sched <subcommand>
 		add @time <name> [@categ]   Add a scheduled event
 		del <index|all>             Delete an scheduled event by its index

License note:
 The original program is made by Daringcuteseal (also known as Pearl)
 which is avaliable at <https://github.com/darincuteseal/whow>,
 and is licensed under GPLv2, so to respect the original license:
 	Copyright (C) 2023 Jumps ade op (jumpsareop@gmail.com)

 	This program is free software; you can redistribute it and/or modify
 	it under the terms of the GNU General Public License as published by
 	the Free Software Foundation; version 2 of the License.
 	
 	This program is distributed in the hope that it will be useful,
 	but WITHOUT ANY WARRANTY; without even the implied warranty of
 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 	GNU General Public License for more details.
 	
 	You should have received a copy of the GNU General Public License along
 	with this program; if not, write to the Free Software Foundation, Inc.,
 	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
	EOF
	exit 1
}

main "$@"
