#!/bin/sh -eu
# shellcheck disable=SC2034,SC2030,SC2031,SC2317,SC2015

# Forked from daringcuteseal's whow, by jumps are op
# This software is under GPL version 2 and comes with ABSOLUTELY NO WARRANTY

main(){
	# Style
	RESET='[0;0m' BOLD='[1m' DIM='[2m' ITALIC='[3m' BLINK='[5m'
	INVERT='[7m' STRIKE='[9m'
	COLOR_black='[30m' COLOR_dred='[31m' COLOR_dgreen='[32m'
	COLOR_orange='[33m' COLOR_dblue='[34m' COLOR_purple='[35m'
	COLOR_magenta='[35m' COLOR_dcyan='[36m' COLOR_grey='[37m'
	COLOR_brown='[1;30m' COLOR_red='[1;31m' COLOR_green='[1;32m'
	COLOR_yellow='[1;33m' COLOR_blue='[1;34m' COLOR_pink='[1;35m'
	COLOR_lblue='[1;36m' COLOR_cyan='[1;36m' COLOR_white='[1;37m'
	BACKGROUND_dred='[1;41m' BACKGROUND_dgreen='[1;42m'
	BACKGROUND_orange='[1;43m' BACKGROUND_dblue='[1;44m'
	BACKGROUND_purple='[1;45m' BACKGROUND_magenta='[1;45m'
	BACKGROUND_dcyan='[1;46m' BACKGROUND_grey='[1;47m'
	BACKGROUND_brown='[1;5;40m' BACKGROUND_red='[1;5;41m'
	BACKGROUND_green='[1;5;42m' BACKGROUND_yellow='[1;5;43m'
	BACKGROUND_blue='[1;5;44m' BACKGROUND_pink='[1;5;45m'
	BACKGROUND_lblue='[1;5;46m' BACKGROUND_cyan='[1;5;46m'
	BACKGROUND_white='[5;47m'

	[ ! -t 1 ] && [ ! "${FORCE_COLOR-}" ] &&
		{ BOLD="" ITALIC="" RESET="" BLINK="" INVERT="" STRIKE="" DIM=""
			COLOR_dred="" COLOR_dgreen="" COLOR_orange="" COLOR_dblue=""
			COLOR_purple="" COLOR_magenta="" COLOR_dcyan="" COLOR_grey=""
			COLOR_brown="" COLOR_red="" COLOR_green="" COLOR_yellow=""
			COLOR_blue="" COLOR_pink="" COLOR_lblue="" COLOR_cyan=""
			BACKGROUND_dred="" BACKGROUND_dgreen="" BACKGROUND_orange=""
			BACKGROUND_dblue="" BACKGROUND_purple="" BACKGROUND_magenta=""
			BACKGROUND_dcyan="" BACKGROUND_grey="" BACKGROUND_brown=""
			BACKGROUND_red="" BACKGROUND_green="" BACKGROUND_yellow=""
			BACKGROUND_blue="" BACKGROUND_pink="" BACKGROUND_lblue=""
			BACKGROUND_cyan="" BACKGROUND_white="";}

	# Icons (emojis)
	ICON_date="üìÜ" ICON_time="üïê" ICON_todo="‚úÖ"
	ICON_important="‚ùó" ICON_events="‚åö" ICON_tag="ÓÇ≤"

	PRG=${0##*/} config=${XDG_CONFIG_HOME:-$HOME/.config}/whowp/rc
	set -- "${@:-show}"
	[ "$1" = --help ] || [ "$*" = "-c rc --help" ] && dishelp
	while getopts hc: OPT;do
		case $OPT in c)config=$OPTARG;; h)(dishelp) || exit 0;; *)dishelp;;esac
	done
	shift $((OPTIND-1))

	# $* takes the first character of IFS as the delimiter
	IFS=/; argv=$*; IFS=" ""	""
"
	case $argv in edit/rc);; *)readconfig "$config";;esac

	case $argv in
		edit/rc)"${EDITOR:-vi}" -- "$config";;
		edit/info)"${EDITOR:-vi}" -- "$CFG_info";;
		show)
			[ "${CFG_usebaddateformat-}" ] &&
				currentdate=$(date +%m/%d/%Y) || currentdate=$(date +%d/%m/%Y)
			currenttime=$(date +%H:%M) CFG_format=$CFG_format/
			while [ "$CFG_format" ];do printformat "${CFG_format%%/*}"
				CFG_format=${CFG_format#*/};done
		;;
		show/*)
			[ "${CFG_usebaddateformat-}" ] &&
				currentdate=$(date +%m/%d/%Y) || currentdate=$(date +%d/%m/%Y)
			currenttime=$(date +%H:%M)
			shift; for format;do printformat "$format";done
		;;
		todo/mark/*)
			isint "$3"
			tmp=$(mkstemp) i=1
			while read -r line;do case $line in todo\ *)
				[ ${i#"$3"} ] || { echo "$line @done" |
					sed 's/ @done.*@done$//'; cat; break;}; i=$((i+1));esac
				echo "$line"
			done <"$CFG_info" >"$tmp"; mv -- "$tmp" "$CFG_info"
		;;
		todo/del/*|event/del/*|sched/del/*)
			[ "$3" != all ] && isint "$3"; tmp=$(mkstemp)
			[ "$3" = all ] && rmall "$1"; i=1
			while read -r line;do case $line in "$1"\ *)
				[ ${i#"$3"} ] || { cat; break;}; i=$((i+1));esac; echo "$line"
			done <"$CFG_info" >"$tmp"; mv -- "$tmp" "$CFG_info"
		;;
		todo/add/*|event/add/*|sched/add/*)
			t=$1; shift 2; echo "$t $*" >>"$CFG_info";;
		edit/*|todo/*|event/*|sched/*)
			echo "$PRG: $2: Unknown argument." >&2; dishelp;;
		*)echo "$PRG: $1: Unknown argument." >&2; dishelp;;
	esac
}

printtodos(){
	[ "${1-}" = important ] && prefix="Important "
	printheader "${prefix-}To-Do's" "$ICON_todo"; prefix="" index=1
	# shellcheck disable=SC2162
	grep "^ *todo " <"$CFG_info" | while read line;do
		line=${line%%#*}' ' line=${line#todo }
		tags="" date="" time="" todo="" tag="" isdone=
		while [ "$line" ];do first=${line%% *} line=${line#* }; case $first in
		@[0-9]*)first=${first#@}
		[ "$(getdate "$first")" ] && date=$(getdate "$first") && continue
		case $first in
		1[2-9]:[0-5][0-9]|2[0-3]:[0-5][0-9])time=$first;;
		[0-9]:[0-5][0-9]|0[0-9]:[0-5][0-9]|1[01]:[0-5][0-9])case ${line%% *} in
		[Pp][Mm])line=${line#[Pp][Mm]} time=$((${first%:*}+12)):${first#*:};;
		*)time=$first line=${line#[Aa][Mm]};;esac;;esac;;
		@?*)tags=${first#@}/$tags;;
		\&?*)tags=${first#&}/$tags todo=${todo:+$todo }${first#&};;
		*)todo=${todo:+$todo }$first;;esac;done
		todo_color=; datepassed "$date" || {
			[ "$date" = "$currentdate" ] && timepassed "$time"
		} || { case /$tags in */important/*):;;*)false;;esac;} &&
			{ printf %s "$COLOR_red"; todo_color=$COLOR_red;}
		[ "${1-}" = important ] && [ ! "$todo_color" ] && continue
		printf "  #%-2d " "$index"; color=
		while [ "${tags%/}" ];do tag=${tags%%/*} tags=${tags#*/}
			[ "$tag" = 'done' ] && tag= && isdone=1 && continue
			eval color="\${COLOR_$(getcatcolor "$tag")-\$todo_color}"
			printf %s "${CFG_icons+$color$ICON_tag}$INVERT$tag $RESET"
		done
		printf %s "${tag:+ }${todo_color:=${color-}}$todo$RESET"
		if [ "${isdone-}" ];then printf %s " ${CFG_icons+$todo_color$ICON_tag}"
			${todo_color:+printf %s "$BACKGROUND_white"}
			echo "${INVERT}done $RESET"
		else datepassed "$date" || {
				[ "$date" = "$currentdate" ] && timepassed "$time"
			} && printf %s " $BACKGROUND_red overdue $RESET"; echo
		fi
		index=$((index+1))
	done
}

printevents(){
	printheader "$1"; index=1
	# shellcheck disable=SC2162
	grep "^ *event " <"$CFG_info" | while read line;do
		line=${line%%#*}\  line=${line#*event } tags="" date="" time="" event=
		while [ "$line" ];do first=${line%% *} line=${line#* }; case $first in
		@[0-9]*)[ "$(getdate "${first#@}")" ] && date=$(getdate "${first#@}");;
		@?*)tags=${first#@}/$tags;;
		\&?*)tags=${first#&}/$tags event=${event:+$event }${first#&};;
		*)event=${event:+$event }$first;;esac;done
		if case $2 in today)[ "$currentdate" = "$date" ];;
		upcomming)! datepassed "$date" && [ "$currentdate" != "$date" ];;
		past)datepassed "$date";;esac;then
			case /$tags in */important/*)printf %s "$COLOR_red";;esac
			printf "  #%-2d " "$index"
			while [ "${tags%/}" ];do tag=${tags%%/*} tags=${tags#*/}
				eval color="\${COLOR_$(getcatcolor "$tag")-}"
				printf %s "${CFG_icons+$color$ICON_tag}$INVERT$tag $RESET"
			done
			echo "${tag:+ }${color-}$event$RESET"
		fi
		index=$((index+1))
	done
}

printschedules(){
	printheader "Scheduled Events" "$ICON_events"
	index=1
	# shellcheck disable=SC2162
	grep "^ *sched " <"$CFG_info" | while read line;do
		line=${line%%#*}' ' line=${line#sched }
		tags="" date="" sched="" tag="" starttime="" endtime=""
		while [ "$line" ];do first=${line%% *} line=${line#* }; case $first in
			@[1-9]:[0-5][0-9]|@0[1-9]:[0-5][0-9]|@1[01]:[0-5][0-9])
				first=${first#@} first=${first#0}
				if [ "$starttime" ];then case ${line%% *} in
					[Pp][Mm])line=${line#[Pp][Mm]}
						endtime=$((${first%:*}+12)):${first#*:};;
					*)endtime=$first line=${line#[Aa][Mm]};;esac
				else case ${line%% *} in
					[Pp][Mm])line=${line#[Pp][Mm]}
						starttime=$((${first%:*}+12)):${first#*:};;
					*)starttime=$first line=${line#[Aa][Mm]};;esac
				fi
			;;
			@1[2-9]:[0-5][0-9]|@2[0-3]:[0-5][0-9])
				[ "$starttime" ] && endtime=${first#@} || starttime=${first#@};;
			@sun|@mon|@tue|@wed|@thu|@fri|@sat|@ev|@wd|@we)day=${first#@};;
			@%)endtime=;;
			@?*)tags=${first#@}/$tags;;
			\&?*)tags=${first#&}/$tags sched=${sched:+$sched }${first#&};;
			*)sched=${sched:+$sched }$first;;
		esac;done
		case /$tags in */important/*)printf %s "$COLOR_red";;esac
		printf "  #%-2d %s " "$index" "$BACKGROUND_white$COLOR_black"
		case $day in sun)day=Sunday;; mon)day=Monday;; thu)day=Thursday;;
		wed)day=Wednesday;; tue)day=Tuesday;; fri)day=Friday;;
		sat)day=Saturdays;; ev)day=Every\ day;; wd)day=Week\ days;;
		we)day=Week\ end;;esac
		printf " %-10s %s ${endtime:+- %s }%s" "$day" "$starttime" \
			${endtime:+"$endtime"} "$RESET"
		color=
		while [ "${tags%/}" ];do tag=${tags%%/*} tags=${tags#*/}
			eval color="\${COLOR_$(getcatcolor "$tag")-}"
			printf %s "${CFG_icons+$color$ICON_tag}$INVERT$tag $RESET"
		done
		echo "${tag:+ } $color$sched$RESET"
		index=$((index+1))
	done
}
readconfig(){
	# Check config permission
	:<"$1"; [ -d "$1" ] && { echo "$PRG: $1: Is a directory" >&2; exit 1;}

	CFG_cats=important:red

	# rc's fuctions
	icons(){ case $1 in [Yy][Ee][Ss]|1)CFG_icons=;; [Nn][Oo]|0)unset CFG_icons;;
		*)echo "$PRG: $1: Invalid option (should be yes/no)" >&2; exit 1;esac;}
	infile(){
		:<"$1"; [ -d "$1" ] && { echo "$PRG: $1: Is a directory" >&2; exit 1;}
		CFG_info=$1
	}
	timeformat(){ case $1 in 12)CFG_12hourtime=1;; 24)unset CFG_12hourtime;;
		*)echo "$PRG: $1: Invalid option (should be 12/24)" >&2; exit 1;esac;}
	dateformat(){ CFG_dateformat=$1;}
	dateformat_cfg(){ case $1 in mm/dd*)CFG_usebaddateformat=1;;
		dd/mm*)unset CFG_usebaddateformat;;
		*)echo "$PRG: $1: Invalid option (dd/mm, mm/dd)" >&2; exit 1;esac;}
	category(){ IFS=/; CFG_cats=${CFG_cats:+$CFG_cats/}$*; IFS=" ""	""
";}
	format(){ IFS=/; CFG_format=${CFG_format:+$CFG_format/}$*; IFS=" ""	""
";}
	# Idk how to handle this, any ideas?
	custom(){ case $1 in *[![:alnum:]_]*)
		echo "$PRG: $1: Invalid custom function name (should be alphanumeric)"
		exit 1
	;;esac; eval "custom_$1=\${2:-:}";}

	# shellcheck source=/dev/null
	. "$config"
	unset -f icons cachedir timeformat dateformat dateformat_cfg category \
		format custom
}
printcals()(y=$(date +%Y) m=$(date +%m) tmp=$(mkstemp)
	set -- "$(mkstemp)" "$(mkstemp)" "$(mkstemp)"
	case $m in 01)cal 12 $((y-1)) >"$1"; cal 1 "$y" >"$2"; cal 2 "$y" >"$3";;
	12)cal 1 "$y" >"$1"; cal 2 "$y" >"$2"; cal 12 "$((y+1))" >"$3";;
	*)cal $((m-1)) "$y" >"$1"; cal "$m" "$y" >"$2"; cal $((m+1)) "$y" >"$3"
	esac
	len=0;for f;do while read -r line;do len=$((len>${#line}?len:${#line}))
	done<"$f";done;len=$((len+1))
	sedcmd="s/$/$(printf %$((len))s)/; s/\(.\{$len\}\).*/\1/"
	for f;do sed "$sedcmd" "$f" >"$tmp"; cp -- "$tmp" "$f";done
	paste -d ' ' -- "$@" | sed '$d';rm -f -- "$tmp" "$@")
printformat(){ case $1 in
	separator:0|separator)echo;;
	separator:1|separator:-)printf "%65s\n" "" | sed 's/ /‚Äî/g';;
	separator:2|separator:=)printf "%65s\n" "" | tr ' ' '=';;
	separator:3|separator:~)printf "%65s\n" "" | tr ' ' '~' ;;
	date)printf " %sToday is%s %s%s%s%s %s%s" \
		"$DIM" "$RESET" "$BACKGROUND_blue" "${CFG_icons+$ICON_date }" \
		"$(date "+${CFG_dateformat:-%a, %b %d %Y}") " \
		"$RESET" "$BACKGROUND_blue" "${CFG_icons+$ICON_time }"
		[ "${CFG_timeformat-}" = 24 ] && date "+%T $RESET" || date "+%r $RESET"
	;;
	cal|calendar)printcals;; important)printtodos important;;
	todos)printtodos;; events)printheader "Events" "$ICON_events"
		printevents "Events Today" today
		printevents "Upcoming Events" upcomming
		printevents "Past Events" past;;
	schedule|sched|scheds)printschedules;;
	custom:?*)case ${1#*:} in *[![:alnum:]_]*)
		echo "$PRG: $1: Invalid custom function name (should be alphanumeric)"
		exit 1
	;;esac; eval "$(eval "printf %s \"\$custom_${1#*:}\"")";;
	*)echo "$PRG: $1: Unknown format" >&2; exit 1;;esac
}
printheader(){ cat <<EOF

${CFG_icons+${2:+ $2}} $1

EOF
}
datepassed(){ [ "$1" ] || return; year=${1##*/} cyear=${currentdate##*/}
	if [ "${CFG_usebaddateformat-}" ];then
		month=${1%%/*} cmonth=${currentdate%%/*}
		day=${1%/*} day=${day#*/} cday=${currentdate%/*} cday=${cday#*/}
	else month=${1%/*} month=${month#*/} cmonth=${currentdate%/*}
		cmonth=${cmonth#*/} day=${1%%/*} cday=${currentdate%%/*}
	fi
	[ "$cyear" -gt "$year" ] && return
	[ "$cyear" = "$year" ] || return
	[ "$cmonth" -gt "$month" ] && return
	[ "$cmonth" = "$month" ] && [ "$cday" -gt "$day" ]
}
timepassed(){ [ "$1" ] || return
	hour=${1%:*} min=${1#*:} chour=${currenttime%:*} cmin=${currenttime#*:}
	[ "$chour" -gt "$hour" ] && return
	[ "$chour" = "$hour" ] && [ "$cmin" -gt "$min" ]
}
mkstemp(){ echo "mkstemp(\`${TMPDIR:-/tmp}/tmp.XXXXXX')" | m4;}
getcatcolor(){ case /$CFG_cats in */$1:*)
	echo "/$CFG_cats" | sed "s#.*/$1"':\([^/]*\)/.*#\1#';esac;return 1;}
isint(){ [ "${1#*[!0-9]*}" ] || { echo "$PRG: $1: Invalid number" >&2;exit 1;};}
getdate(){ case $1 in [0-9][0-9]/[0-9][0-9]|[0-9]/[0-9][0-9]|\
	[0-9][0-9]/[0-9]|[0-9]/[0-9])echo "$1/$(date +%Y)";;
	[0-9][0-9]/[0-9][0-9]/[0-9][0-9]|[0-9]/[0-9][0-9]/[0-9][0-9]|\
	[0-9][0-9]/[0-9]/[0-9][0-9]|[0-9]/[0-9]/[0-9][0-9])
	echo "${1%/*}/$(date +%C)(${1##*/}";;
	[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
	[0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]|\
	[0-9][0-9]/[0-9]/[0-9][0-9][0-9][0-9]|\
	[0-9]/[0-9]/[0-9][0-9][0-9][0-9])echo "$1";;esac
}
rmall(){ grep -v "^ *$1 " <"$CFG_info" >"$tmp"; mv -- "$tmp" "$CFG_info";exit;}
dishelp(){
	cat >&2 <<EOF
whowp  the better whow, written in POSIX shell
Usage: $PRG [options] [command [args]]

\`whowp show\` will be the default command, if no arguments were given.

Options:
	-h       Show this help
	-c FILE  Specify a config,
	           default is $ITALIC\$XDG_CONFIG_HOME$RESET/whow/rc,
	           or $ITALIC\$HOME$RESET/.config/whow/rc

Commands:
	edit <rc|info>			Edit with $ITALIC\$EDITOR$RESET, or vi
	show [FORMAT...]		Show FORMAT(s)
	todo <subcommand>
		add <name> [@due|@categ]  Add a todo
		del <index|all>		  Delete a todo by its index
		mark <index>		  Mark done/undone a todo by its index

	event <subcommand>
		add @date <name> [@categ] Add an event
		del <index|all>		  Delete an event by its index

	sched <subcommand>
		add @time <name> [@categ] Add a scheduled event
		del <index|all>		  Delete a scheduled event by its index

License note:
 The original program is made by Daringcuteseal (also known as Pearl)
 which is avaliable at <https://github.com/darincuteseal/whow>,
 and is licensed under GPLv2, so to respect the original license:
	Copyright (C) 2023 Jumps Are Op (jumpsareop@gmail.com)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; version 2 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along
	with this program; if not, see <https://gnu.org/licenses/gpl-2.0.html>.
EOF
	exit 0
}
echo(){ printf "%s\n" "$*";}
main "$@"
